
service: flutter-aws-serverless
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  profile: taehoon-flutter-study
  logs:
    websocket: true
  environment:
    TABLE_NAME: flutter-chat-tbl
  iamRoleStatements:
    - Effect: "Allow"
      Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

 
functions:
  # Web sockets handlers
  connectionHandler:
    handler: handler.connectionHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: handler.defaultHandler
    events:
      - websocket: $default
  databaseStreamHandler:
    handler: handler.databaseStreamHandler
    events:
      - websocket:
          route: databaseStream
  # DynamoDB Stream Handler
  chatTableStreamHandler:
    handler: handler.chatTableStreamHandler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt: [flutterChatTable, StreamArn]
  # CONNECTED collection CRUD
  createConnected:
    handler: handler.createConnected
    events:
      - http:
          path: ${self:service}/connected/createConnected
          method: get
  createConnectedUser:
    handler: handler.createConnectedUser
    events:
      - http:
          path: ${self:service}/connected/createConnectedUser
          method: post
          cors: true
  getConnected:
    handler: handler.getConnected
    events:
      - http:
          path: ${self:service}/connected/getConnected
          method: get
  updateConnected:
    handler: handler.updateConnected
    events:
      - http:
          path: ${self:service}/connected/updateConnected
          method: post
          cors: true
  deleteConnected:
    handler: handler.deleteConnected
    events:
      - http:
          path: ${self:service}/connected/deleteConnected    
          method: get
          
  # MSG Collection CRUD
  createMessage:
    handler: handler.createMessage
    events:
      - http:
          path: ${self:service}/messages/createMessage
          method: post
          cors: true      
  getMessage:
    handler: handler.getMessage
    events:
      - http:
          path: ${self:service}/messages/getMessage
          method: get      
  updateMessage:
    handler: handler.updateMessage
    events:
      - http:
          path: ${self:service}/messages/updateMessage
          method: post

resources:
  Resources:
    flutterChatTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: flutter-chat-tbl
        AttributeDefinitions:
          - AttributeName: collection
            AttributeType: S  
          - AttributeName: subCollection
            AttributeType: S
        KeySchema:
          - AttributeName: collection
            KeyType: HASH   # Partition Key
          - AttributeName: subCollection
            KeyType: RANGE  # Sort key
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_IMAGE
          